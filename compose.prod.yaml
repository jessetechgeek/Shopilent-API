services:
  # Traefik Reverse Proxy with SSL/TLS
  traefik:
    container_name: shopilent-traefik
    image: traefik:v3.3
    command:
      # Enable API and dashboard (secure with basic auth in production)
      - "--api.dashboard=true"
      - "--api.insecure=false"
      # Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=shopilent_web"
      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      # Let's Encrypt
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      # Logging
      - "--log.level=INFO"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - web
    restart: always
    labels:
      # Traefik dashboard (optional - comment out if not needed)
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH}"

  # API Service
  shopilent.api:
    container_name: shopilent-api
    image: shopilent.api:production
    build:
      context: .
      dockerfile: src/API/Shopilent.API/Dockerfile
      args:
        BUILD_CONFIGURATION: Release
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_URLS=http://+:8080
      # Database
      - ConnectionStrings__PostgreSql=Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Port=5432;SSL Mode=Prefer;Trust Server Certificate=true
      # Redis
      - Redis__ConnectionString=redis:6379
      - Redis__InstanceName=shopilent_prod_
      # S3/MinIO
      - S3__ServiceUrl=http://minio:9000
      - S3__AccessKey=${MINIO_ROOT_USER}
      - S3__SecretKey=${MINIO_ROOT_PASSWORD}
      - S3__BucketName=${S3_BUCKET_NAME}
      - S3__Region=${S3_REGION}
      - S3__ForcePathStyle=true
      # Email (External SMTP)
      - Email__SmtpServer=${SMTP_SERVER}
      - Email__SmtpPort=${SMTP_PORT}
      - Email__SmtpUsername=${SMTP_USERNAME}
      - Email__SmtpPassword=${SMTP_PASSWORD}
      - Email__FromEmail=${SMTP_FROM_EMAIL}
      - Email__FromName=${SMTP_FROM_NAME}
      - Email__UseSsl=${SMTP_USE_SSL:-true}
      # Meilisearch
      - Meilisearch__Url=http://meilisearch:7700
      - Meilisearch__ApiKey=${MEILISEARCH_MASTER_KEY}
      # Logging
      - Seq__ServerUrl=http://seq:5341
      # JWT
      - Jwt__Secret=${JWT_SECRET}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - Jwt__AccessTokenLifetimeMinutes=${JWT_ACCESS_TOKEN_LIFETIME:-15}
      - Jwt__RefreshTokenLifetimeDays=${JWT_REFRESH_TOKEN_LIFETIME:-7}
      # Stripe
      - Stripe__SecretKey=${STRIPE_SECRET_KEY}
      - Stripe__PublishableKey=${STRIPE_PUBLISHABLE_KEY}
      - Stripe__WebhookSecret=${STRIPE_WEBHOOK_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_healthy
      meilisearch:
        condition: service_started
    networks:
      - web
      - internal
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 512M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=8080"
      # Security headers
      - "traefik.http.middlewares.api-headers.headers.customResponseHeaders.X-Frame-Options=DENY"
      - "traefik.http.middlewares.api-headers.headers.customResponseHeaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.api-headers.headers.customResponseHeaders.X-XSS-Protection=1; mode=block"
      - "traefik.http.middlewares.api-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.api-headers.headers.stsSeconds=31536000"
      - "traefik.http.routers.api.middlewares=api-headers"

  # Admin Panel (React/Vite)
  admin:
    container_name: shopilent-admin
    image: shopilent.admin:production
    build:
      context: src/UI/Shopilent.Admin
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
    depends_on:
      - shopilent.api
    networks:
      - web
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 32M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`admin.${DOMAIN}`)"
      - "traefik.http.routers.admin.entrypoints=websecure"
      - "traefik.http.routers.admin.tls.certresolver=letsencrypt"
      - "traefik.http.services.admin.loadbalancer.server.port=80"
      # Security headers
      - "traefik.http.middlewares.admin-headers.headers.customResponseHeaders.X-Frame-Options=DENY"
      - "traefik.http.middlewares.admin-headers.headers.customResponseHeaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.admin-headers.headers.customResponseHeaders.X-XSS-Protection=1; mode=block"
      - "traefik.http.middlewares.admin-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.admin-headers.headers.stsSeconds=31536000"
      - "traefik.http.routers.admin.middlewares=admin-headers"

  # Client App (Next.js)
  client:
    container_name: shopilent-client
    image: shopilent.client:production
    build:
      context: src/UI/Shopilent.Client
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - API_URL=https://api.${DOMAIN}
      - NEXT_PUBLIC_API_URL=https://api.${DOMAIN}
    depends_on:
      - shopilent.api
    networks:
      - web
    restart: always
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`shop.${DOMAIN}`) || Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.client.entrypoints=websecure"
      - "traefik.http.routers.client.tls.certresolver=letsencrypt"
      - "traefik.http.services.client.loadbalancer.server.port=3000"
      # Security headers
      - "traefik.http.middlewares.client-headers.headers.customResponseHeaders.X-Frame-Options=SAMEORIGIN"
      - "traefik.http.middlewares.client-headers.headers.customResponseHeaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.client-headers.headers.customResponseHeaders.X-XSS-Protection=1; mode=block"
      - "traefik.http.middlewares.client-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.client-headers.headers.stsSeconds=31536000"
      - "traefik.http.routers.client.middlewares=client-headers"

  # PostgreSQL Database (Single instance for production)
  postgres:
    container_name: shopilent-postgres
    image: postgres:17.5
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    command: >
      postgres
      -c shared_buffers=256MB
      -c max_connections=200
      -c effective_cache_size=1GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=2MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis Cache
  redis:
    container_name: shopilent-redis
    image: redis:8.0.3-alpine
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - internal
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # MinIO Object Storage
  minio:
    container_name: shopilent-minio
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z-cpuv1
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BROWSER_REDIRECT_URL=https://minio.${DOMAIN}
    volumes:
      - minio_data:/data
    networks:
      - web
      - internal
    command: server --console-address ":9001" /data
    restart: always
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    labels:
      # MinIO Console (Admin UI)
      - "traefik.enable=true"
      - "traefik.http.routers.minio-console.rule=Host(`minio.${DOMAIN}`)"
      - "traefik.http.routers.minio-console.entrypoints=websecure"
      - "traefik.http.routers.minio-console.tls.certresolver=letsencrypt"
      - "traefik.http.routers.minio-console.service=minio-console"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
      # MinIO API (S3 compatible)
      - "traefik.http.routers.minio-api.rule=Host(`s3.${DOMAIN}`)"
      - "traefik.http.routers.minio-api.entrypoints=websecure"
      - "traefik.http.routers.minio-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.minio-api.service=minio-api"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"

  # MinIO Bucket Creator
  minio-createbuckets:
    container_name: shopilent-minio-createbuckets
    image: minio/mc:RELEASE.2025-07-21T05-28-08Z
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - internal
    entrypoint: >
      /bin/sh -c "
      sleep 10 &&
      /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      /usr/bin/mc mb --ignore-existing myminio/${S3_BUCKET_NAME} &&
      /usr/bin/mc anonymous set download myminio/${S3_BUCKET_NAME} &&
      echo 'Bucket ${S3_BUCKET_NAME} created and configured successfully'
      "
    restart: "no"

  # Meilisearch Full-text Search
  meilisearch:
    container_name: shopilent-meilisearch
    image: getmeili/meilisearch:v1.15.2
    environment:
      - MEILI_MASTER_KEY=${MEILISEARCH_MASTER_KEY}
      - MEILI_ENV=production
      - MEILI_NO_ANALYTICS=true
    volumes:
      - meilisearch_data:/meili_data
    networks:
      - internal
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Seq Centralized Logging
  seq:
    container_name: shopilent-seq
    image: datalust/seq:2025.2
    environment:
      - ACCEPT_EULA=Y
      - SEQ_ADMIN_USERNAME=${SEQ_ADMIN_USERNAME}
      - SEQ_ADMIN_PASSWORD=${SEQ_ADMIN_PASSWORD}
      - SEQ_FIRSTRUN_ADMINPASSWORD=${SEQ_ADMIN_PASSWORD}
      - BASE_URI=https://logs.${DOMAIN}
    volumes:
      - seq_data:/data
    networks:
      - web
      - internal
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.seq.rule=Host(`logs.${DOMAIN}`)"
      - "traefik.http.routers.seq.entrypoints=websecure"
      - "traefik.http.routers.seq.tls.certresolver=letsencrypt"
      - "traefik.http.services.seq.loadbalancer.server.port=80"
      # Basic auth for Seq (optional - Seq has its own auth)
      - "traefik.http.routers.seq.middlewares=seq-auth"
      - "traefik.http.middlewares.seq-auth.basicauth.users=${SEQ_BASIC_AUTH}"

networks:
  web:
    name: shopilent_web
    driver: bridge
  internal:
    name: shopilent_internal
    driver: bridge
    internal: true

volumes:
  postgres_data:
    name: shopilent_postgres_prod_data
  redis_data:
    name: shopilent_redis_prod_data
  minio_data:
    name: shopilent_minio_prod_data
  seq_data:
    name: shopilent_seq_prod_data
  meilisearch_data:
    name: shopilent_meilisearch_prod_data
  traefik_letsencrypt:
    name: shopilent_traefik_letsencrypt
